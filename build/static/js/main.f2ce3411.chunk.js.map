{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","console","log","Component","Todoing","idx","del","todo","map","item","key","defaultProps","Todolist","delItem","splice","addItem","ReactDOM","render","document","getElementById","className"],"mappings":"oQAGqBA,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAY,SAACC,GAEQ,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAebC,aAAa,SAACN,GACV,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAf5D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBLC,KAAKC,KAAKJ,EAAEK,U,+BAEV,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAIV,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKhB,YAAasB,KAAK,SADhH,IAGI,2BAAOb,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAME,EAAGO,UAAWL,KAAKhB,YAAasB,KAAK,SAHxG,IAKI,2BAAOb,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKhB,YAAasB,KAAK,SALxG,IAOI,2BAAIN,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,GAEzC,2BAAOI,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMD,KAAK,SACxC,4BAAQE,QAAS,WAAKC,QAAQC,IAAI,EAAKH,IAAIjB,SAA3C,qB,GApCuBqB,aCAlBC,E,gLACTC,EAAI5B,GACRwB,QAAQC,IAAIzB,GACZe,KAAKb,MAAM2B,IAAID,K,+BAET,IAAD,OACAE,EAAQf,KAAKb,MAAb4B,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKJ,GAAN,OACT,wBAAIK,IAAKL,GACJI,EADL,MACa,4BAAQT,QAAS,kBAAI,EAAKrB,MAAM2B,IAAID,KAApC,yB,GAZIF,aAuBrCC,EAAQO,aAAa,CACjBJ,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICvBGK,E,YACjB,aAAc,IAAD,8BACT,+CAaJC,QAAQ,SAACR,EAAI5B,GACTwB,QAAQC,IAAIG,GACZ,IAAIE,EAAK,YAAI,EAAKnB,MAAMmB,MACxBA,EAAKO,OAAOT,EAAI,GAChB,EAAKrB,SAAS,CACVuB,KAAKA,KAjBT,EAAKnB,MAAQ,CACTmB,KAAK,CAAC,EAAE,EAAE,IAHL,E,yGAuBT,OACI,6BACI,kBAAC,EAAD,CAAW3B,IAAKY,KAAKuB,UACrB,kBAAC,EAAD,CAAST,IAAKd,KAAKqB,QAASN,KAAMf,KAAKJ,MAAMmB,Y,GA3BvBJ,aCmBtCa,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAiHlBD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.f2ce3411.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//受控组件:value值被react控制的表单元素\r\n//可以实时获取表单元素的值\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n\t\t//绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n            this.refs.a.focus();\r\n        }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref='a' name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/*非受控组件：一次性获取或处理表单元素的值*/}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/**\r\n * 受控组件：\r\n * 1、给input标签添加value属性，赋值为state的值\r\n * 2、给input标签绑定onChange事件\r\n * 在事件处理函数中setState\r\n * 3、一个事件处理函数控制多个表单元素时，\r\n * 给input标签加上name属性，事件处理函数中写：\r\n * setState({[e.target.name]:e.target.value})\r\n */","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    delItem(idx,e){\r\n        console.log(e);\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                    <li key={idx}>\r\n                        {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n    }\r\n    addItem(){\r\n        // this.state.todo.push(data);\r\n        // console.log(data);\r\n        // this.setState({\r\n        //     todo:[...this.state.todo,data]\r\n        // })\r\n\r\n    }\r\n    delItem=(idx,e)=>{\r\n        console.log(idx);\r\n        let todo=[...this.state.todo];\r\n        todo.splice(idx,1);\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\n// import ShowTime from './Showtime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\ndiv.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}